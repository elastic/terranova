[tool.black]
line-length = 120

[tool.isort]
profile = "black"

[tool.pyright]
include = ["terranova", "scripts"]
pythonVersion = "3.11"
pythonPlatform = "All"
typeCheckingMode = "standard"

[tool.poetry]
name = "terranova"
version = "0.5.3-dev"
description = "Terranova is a thin wrapper for Terraform that provides extra tools and logic to handle Terraform configurations at scale."
authors = ["Adrien Mannocci <adrien.mannocci@elastic.co>"]
license = "Apache-2.0"
readme = "README.md"
repository = "https://github.com/elastic/terranova"
documentation = "https://github.com/elastic/terranova"
classifiers = [
    "Intended Audience :: Developers",
    "Programming Language :: Python :: 3.11",
]
packages = [{ include = "terranova" }]

[tool.poetry.scripts]
terranova = "terranova.cli:main"

[tool.poetry.urls]
"Changelog" = "https://github.com/elastic/terranova/CHANGELOG.md"
"Tracker" = "https://github.com/elastic/terranova/issues"

[tool.poetry.dependencies]
python = ">=3.11,<3.13"
click = "^8.1.7"            # BSD
dataclasses-json = "^0.6.7" # MIT
envyaml = "^1.10.211231"    # MIT
jinja2 = "^3.1.4"           # BSD
jsonschema = "^4.23.0"      # MIT
mdformat = "^0.7.17"        # MIT
overrides = "^7.7.0"        # Apache-2.0
rich = "^13.8.1"            # MIT
sh = "^2.0.7"               # MIT

[tool.poetry.group.build.dependencies]
pyinstaller = "^6.10.0"     # GPL-2.0: https://pyinstaller.org/en/stable/license.html

[tool.poetry.group.dev.dependencies]
black = "^24.8.0"           # MIT
isort = "^5.13.2"           # MIT
licenseheaders = "^0.8.8"   # MIT
pylint = "^3.2.7"           # GPL-2.0: https://github.com/pylint-dev/pylint/blob/main/LICENSE
pytest = "^8.3.3"           # MIT
pytest-timeout = "^2.3.1"   # MIT
pytest-xdist = "^3.6.1"     # MIT

[tool.poe.tasks."env:configure"]
help = "Setup project environment."
script = "scripts.env:configure"

[tool.poe.tasks."project:upgrade"]
help = "Upgrade project dependencies."
sequence = [
    { cmd = "poetry up --latest" },
    { cmd = "pre-commit autoupdate" },
]

[tool.poe.tasks."project:license"]
help = "Add license header in codebase."
sequence = [
    { cmd = "licenseheaders -t .copyright.tmpl -d scripts" },
    { cmd = "licenseheaders -t .copyright.tmpl -d terranova --exclude terranova/templates/resources.md" },
]

[tool.poe.tasks.wipe]
shell = """
import shutil

for path in ["build", "dist"]:
    try:
        shutil.rmtree(path)
    except FileNotFoundError as err:
        print(f"Skipping {path} deletion...")
"""
interpreter = "python"

[tool.poe.tasks.generate]
help = "Generate pyinstaller config."
script = "scripts.generate:run"

[tool.poe.tasks.lint]
help = "Lint code project."
script = "scripts.lint:run"

[tool.poe.tasks.fmt]
help = "Format code project."
sequence = [
    { cmd = "isort terranova tests scripts" },
    { cmd = "black terranova tests scripts" },
]

[tool.poe.tasks.build]
deps = ["wipe"]
help = "Build standalone binary."
script = "scripts.build:run"

[tool.poe.tasks."test"]
help = "Run all tests."
cmd = "pytest --junitxml=reports/junit-report.xml -n=auto --timeout=900 --dist=loadgroup tests"

[tool.poe.tasks."test:e2e"]
help = "Run e2e tests."
cmd = "pytest --junitxml=reports/junit-report.xml -n=auto --timeout=900 --dist=loadgroup tests/e2e"

[tool.poe.tasks."release:pre"]
help = "Create a PR with changes for release."
script = "scripts.release:pre"

[tool.poe.tasks."release"]
help = "Create a new terranova release."
script = "scripts.release:run"

[tool.poe.tasks."release:post"]
help = "Prepare next iteration."
script = "scripts.release:post"

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"
