[tool.black]
line-length = 120

[tool.isort]
profile = "black"

[tool.poetry]
name = "terranova"
version = "0.2.0"
description = "Terranova is a thin wrapper for Terraform that provides extra tools and logic to handle Terraform configurations at scale."
authors = ["Adrien Mannocci <adrien.mannocci@elastic.co>"]
license = "Apache-2.0"
readme = "README.md"
repository = "https://github.com/elastic/terranova"
documentation = "https://github.com/elastic/terranova"
classifiers = [
  "Intended Audience :: Developers",
  "Programming Language :: Python :: 3.11"
]
packages = [
  { include = "terranova" }
]

[tool.poetry.scripts]
terranova = "terranova.terranova:main"

[tool.poetry.urls]
"Changelog" = "https://github.com/elastic/terranova/CHANGELOG.md"
"Tracker" = "https://github.com/elastic/terranova/issues"

[tool.poetry.dependencies]
python = ">=3.11,<3.13"
click = "^8.1.7" # BSD
dataclasses-json = "^0.6.3" # MIT
envyaml = "^1.10.211231" # MIT
jinja2 = "^3.1.3" # BSD
jsonschema = "^4.21.1" # MIT
mdformat = "^0.7.17" # MIT
overrides = "^7.7.0" # Apache-2.0
rich = "^13.7.1" # MIT
sh = "^2.0.6" # MIT

[tool.poetry.dev-dependencies]
black = "^24.2.0" # MIT
dotty-dict = "^1.3.1" # MIT
isort = "^5.13.2" # MIT
poethepoet = "^0.25.0" # MIT
poetry-plugin-up = "^0.7.1" # MIT
pyinstaller = "^6.4.0" # GPL-2.0: https://pyinstaller.org/en/stable/license.html
pylint = "^3.1.0" # GPL-2.0: https://github.com/pylint-dev/pylint/blob/main/LICENSE
toml = "^0.10.2" # MIT

[tool.poe.tasks."env:configure"]
help = "Setup project environment."
script = "scripts.env:configure"

[tool.poe.tasks."project:upgrade"]
deps = ["env:configure"]
help = "Upgrade project dependencies."
cmd = "poetry up --latest"

[tool.poe.tasks.wipe]
shell = """
import shutil

for path in ["build", "dist"]:
    try:
        shutil.rmtree(path)
    except FileNotFoundError as err:
        print(f"Skipping {path} deletion...")
"""
interpreter = "python"

[tool.poe.tasks.generate]
deps = [
  "env:configure"
]
help = "Generate pyinstaller config."
script = "scripts.generate:run"

[tool.poe.tasks.lint]
deps = ["env:configure"]
help = "Lint code project."
cmd = "pylint terranova"

[tool.poe.tasks.fmt]
deps = ["env:configure"]
help = "Format code project."
sequence = [
  { cmd = "isort terranova tests scripts" },
  { cmd = "black terranova tests scripts" }
]

[tool.poe.tasks.build]
deps = [
  "env:configure",
  "wipe"
]
help = "Build standalone binary."
script = "scripts.build:run"

[tool.poe.tasks."release:pre"]
deps = [
  "env:configure"
]
help = "Create a PR with changes for release."
script = "scripts.release:pre"

[tool.poe.tasks."release"]
deps = [
  "env:configure"
]
help = "Create a new terranova release."
script = "scripts.release:run"

[tool.poe.tasks."release:post"]
deps = [
  "env:configure"
]
help = "Prepare next iteration."
script = "scripts.release:post"

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"
