---

name: Release

on:
  workflow_dispatch:
    ref:
      description: 'Branch or tag ref to run the workflow on'
      required: true
      default: 'main'
    version:
      description: 'The version to release (e.g. 1.2.3). This workflow will automatically perform the required version bumps'
      required: true

env:
  RELEASE_VERSION: ${{ inputs.version }}

permissions:
  contents: read

concurrency:
  group: ${{ github.workflow }}

jobs:
  validate-tag:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Validate tag does not exist on current commit
        uses: ./.github/workflows/validate-tag
        with:
          tag: ${{ env.RELEASE_VERSION }}

  build:
    needs:
      - validate-tag
    strategy:
      matrix:
        os:
          - macos-14
          - macos-13
          - ubuntu-latest
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v4

      - name: Set up QEMU
        if: matrix.os == 'ubuntu-latest'
        uses: docker/setup-qemu-action@v3
      - name: Set up Docker Buildx
        if: matrix.os == 'ubuntu-latest'
        uses: docker/setup-buildx-action@v3

      - uses: actions/setup-python@v5
        with:
          python-version-file: '.python-version'

      - name: Install poetry and dependencies
        run: |
          pip3 install --no-cache-dir --upgrade pip poetry
          poetry install --no-interaction

      - name: Build
        run: poetry run poe build

      - uses: actions/upload-artifact@v4
        with:
          name: terranova-${{ matrix.os }}
          path: 'dist/*'

  release:
    runs-on: ubuntu-latest
    needs:
      - build
    permissions:
      contents: write
    steps:
      - uses: actions/checkout@v4

      - uses: actions/download-artifact@v4
        with:
          merge-multiple: true

      - name: Create the release tag
        run: |
          git tag "${RELEASE_VERSION}"
          git push origin "${RELEASE_VERSION}"

      - name: Create the release
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          gh release create --generate-notes --latest --title="terranova v${RELEASE_VERSION}" "$RELEASE_VERSION}" ./terranova-*
